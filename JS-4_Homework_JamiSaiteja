Homework 1: 'You have to flatten an obj'

Sol:

const obj = {
  name: 'Piyush',
  age: 24,
  address: {
    city: 'Patiala',
    country: 'IN',
    loc: {
      lat: 1,
      lon: 1
    }
  }
};


function myFlat(obj, prefix = ''){
    let output = {};
    for (let key in obj){
        let val = obj [key];
        let newkey= prefix === '' ? key : prefix +'.'+key;
        if(val !== null && typeof val === 'object' ) {
            let recursiveOutput = myFlat(val, newkey);
            output = {...output, ...recursiveOutput};
        }else{
            output[newkey] = val;
        }
    }
    return output;
}

console.log(myFlat(obj))


Homework 3:  .find | .findIndex | .sort | .some

Sol:
1).find:The find() method returns the value of the first element in the array that satisfies the provided testing function. Otherwise, it returns undefined.
  Example:  const numbers = [1, 2, 3, 4];
            const found = numbers.find(num => num > 2);
            console.log(found); // Output: 3

2).findIndex: The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1.
  Example:  const numbers = [1, 2, 3, 4];
            const foundIndex = numbers.findIndex(num => num > 20);
            console.log(foundIndex); // Output: 3

3) .sort: The sort() method sorts the elements of an array in place and returns the sorted array.
 Exmaple: const fruits = ['Banana', 'Orange', 'Apple'];
          fruits.sort();
          console.log(fruits); // Output: ['Apple', 'Banana', 'Orange']

4) .some: The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns true if any element satisfies the testing function; otherwise, it returns false.
  Example:  const numbers = [10, 20, 30, 40];
            const hasGreaterThanTwenty = numbers.some(num => num > 20);
            console.log(hasGreaterThanTwenty); // Output: true

Homework 4: Difference bw splice and slice in array

1) splice:

The splice method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
Syntax: array.splice(start, deleteCount, item1, item2, ...)
start: The index at which to start changing the array.
deleteCount: The number of elements to remove from the array. If set to 0, no elements are removed. If omitted or undefined, all elements from start to the end of the array will be removed.
item1, item2, ...: Elements to add to the array. If omitted, only elements are removed.
Returns an array containing the removed elements, or an empty array if no elements were removed.
Example:
  const array = ['a', 'b', 'c', 'd'];
  const removed = array.splice(1, 2, 'x', 'y');
  console.log(array); // Output: ['a', 'x', 'y', 'd']
  console.log(removed); // Output: ['b', 'c']


2) slice:
The slice method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array.
Syntax: array.slice(start, end)
start: The index at which to begin extraction. If negative, it indicates an offset from the end of the array.
end: The index at which to end extraction. If omitted, slice extracts to the end of the array. If negative, it indicates an offset from the end of the array.
Returns a new array containing elements from start up to, but not including, end.
Example:
  const array = ['a', 'b', 'c', 'd'];
  const sliced = array.slice(1, 3);
  console.log(sliced); // Output: ['b', 'c'] 


Homework 2: 'You have to wite polyfill for deep clone of an object' const newObj = obj.deepClone()

function deepCopy(val) {
  if (["string", "number", "boolean"].includes (typeof val)) {
    return val;
  } else if (Array.isArray(val)) {
    return val.map((el) => deepCopy(el));
  } else {
    return Object.keys (val). reduce ((acc, key) => {
      acc [key] =deepCopy (val [key]);
      return acc;
    }, {});
  }
}

